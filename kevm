#!/usr/bin/env bash

set -euo pipefail
shopt -s extglob

# https://stackoverflow.com/questions/59895/getting-the-source-directory-of-a-bash-script-from-within
kevm_script="$0"
while [[ -h "$kevm_script" ]]; do
    kevm_dir="$(cd -P "$(dirname "$kevm_script")" && pwd)"
    kevm_script="$(readlink "$kevm_script")"
    [[ "$kevm_script" != /* ]] && kevm_script="$kevm_dir/$kevm_script"
done
kevm_dir="$(cd -P "$(dirname "$kevm_script")" && pwd)"
build_dir="$kevm_dir/.build"
release_dir="${K_BIN:-$build_dir/k/k-distribution/target/release/k}"
lib_dir="$build_dir/local/lib"

export PATH="$release_dir/lib/native/linux:$release_dir/lib/native/linux64:$release_dir/bin/:$PATH"
export LD_LIBRARY_PATH="$release_dir/lib/native/linux64:$lib_dir:${LD_LIBRARY_PATH:-}"

test_logs="$build_dir/logs"
mkdir -p "$test_logs"
test_log="$test_logs/tests.log"
haskell_prof_log="kore-exec.prof"
haskell_hp_log="kore-exec.hp"

# Utilities
# ---------

progress() { echo "== $@" ; }
warning()  { echo -e "WARNING:" "$@" >&2 ; }
die()      { echo -e "FATAL:" "$@" >&2 ; exit 1 ; }

pretty_diff() {
    git --no-pager diff --no-index "$@"
}

# Runners
# -------

# User Commands

run_krun() {
    local run_file=$1 ; shift
    export K_OPTS=-Xss500m
    case "$backend" in
        haskell)      args=()                                                                        ;;
        haskell-perf) args=(--haskell-backend-command "kore-exec +RTS -p -h -RTS") ; backend=haskell ;;
        ocaml)        args=(--interpret)                                                             ;;
        *)            args=()                                                                        ;;
    esac
    krun --directory "$backend_dir" -cSCHEDULE="$cSCHEDULE" -pSCHEDULE='printf %s' -cMODE="$cMODE" -pMODE='printf %s' "$run_file" "${args[@]-}" "$@"
}

run_proof() {
    local proof_file="$1" ; shift
    [[ -f "$proof_file" ]] || die "$proof_file does not exist"
    export K_OPTS=-Xmx8G
    case "$backend" in
        haskell)      args=()                                                                        ;;
        haskell-perf) args=(--haskell-backend-command "kore-exec +RTS -p -h -RTS") ; backend=haskell ;;
    esac
    kprove --directory "$backend_dir" "$proof_file" --def-module VERIFICATION "${args[@]-}" "$@"
}

# Dev Commands

run_interpret() {
    test_file="$1" ; shift
    interpreter="$build_dir/$backend/driver-kompiled/interpreter"
    kast="$(mktemp)"
    output="$(mktemp)"
    trap "rm -rf $kast $output" INT TERM EXIT
    case "$backend" in
        ocaml)  "$kevm_dir/kast-json.py" "$test_file" > "$kast"
                "$interpreter" "$build_dir/ocaml/driver-kompiled/realdef.cma" -c PGM "$kast" textfile \
                             -c SCHEDULE "$cSCHEDULE" text -c MODE "$cMODE" text \
                             --output-file "$output"
                ;;

        llvm)   "$kevm_dir/kore-json.py" "$test_file" "$cSCHEDULE" "$cMODE" > "$kast"
                "$interpreter" "$kast" -1 "$output"
                ;;

        *)      die "Bad backend for interpreter: '$backend'"
                ;;
    esac
}

run_test() {
    local test_file test_log_name output_file expected_file

    test_file="$1" ; shift

    test_log_name="$test_logs/$test_file"
    mkdir -p "$(dirname "$test_log_name")"

    output_file="$test_log_name.out"

    if [[ -f "$test_file.out" ]]; then
        expected_file="$test_file.out"
    else
        expected_file="tests/templates/output-success-$backend.json"
    fi

    case "$test_file" in
        *proofs/*)
            run_proof "$test_file" --debug "$@"
            ;;
        *interactive/*)
            run_krun "$test_file" "$@" > "$output_file" \
                || pretty_diff "$expected_file" "$output_file"
            ;;
        *)
            case "$backend" in
                java)
                    run_krun "$test_file" "$@" > "$output_file" \
                        || pretty_diff --ignore-all-space "$expected_file" "$output_file"
                    ;;
                haskell*)
                    run_krun "$test_file" "$@" > "$output_file" || true
                    [[ ! -f "$haskell_prof_log" ]] || mv "$haskell_prof_log" "$test_log_name.$haskell_prof_log"
                    [[ ! -f "$haskell_hp_log"   ]] || mv "$haskell_hp_log"   "$test_log_name.$haskell_hp_log"
                    pretty_diff --ignore-all-space "$expected_file" "$output_file"
                    ;;
                ocaml|llvm)
                    run_interpret "$test_file"
                    ;;
                *)
                    die "Cannot test file '$test_file' with '$backend' backend!"
                    ;;
            esac
            ;;
    esac
}

run_test_profile() {
    local test_file exit_status
    local output_log_dir stdout_log stderr_log

    test_file="$1" ; shift

    output_log_dir="$test_logs/$(dirname -- "$test_file")"
    stdout_log="$test_logs/$test_file.out"
    stderr_log="$test_logs/$test_file.err"
    [[ -d "$output_log_dir" ]] || mkdir -p "$output_log_dir"

    exit_status='0'
    `which time` --quiet --format '%x %es %Us %Ss %MKB %C' --output "$test_log" --append \
        bash -c "$0 test --backend $backend $test_file $@" \
        1> "$stdout_log" 2> "$stderr_log" \
        || exit_status="$?"

    if [[ "$exit_status" == '0' ]]; then
        progress "passed test: $test_file"
    else
        die "failed test: $test_file"
    fi

    exit "$exit_status"
}

run_sort_logs() {
    local tmp_file
    tmp_log="$(mktemp $test_logs/log.XXXXXX)"

    for log in $now_passing $now_failing; do
        if [[ -f "$log" ]]; then
            sort -u "$log" > "$tmp_log"
            cp "$tmp_log" "$log"
        fi
    done

    if [[ -f "$run_times" ]]; then
        sort -k2 -u "$run_times" > "$tmp_log"
        cp "$tmp_log" "$run_times"
    fi
}

run_get_failing() {
    count="${1:-1}"
    cat "$now_failing" | sort -R | head -n"$count"
}

# Main
# ----

run_command="$1" ; shift

backend="ocaml"
[[ ! "$run_command" == 'prove' ]] || backend='java'
if [[ $# -gt 0 ]] && [[ $1 == '--backend' ]]; then
    backend="$2"
    shift 2
fi
backend_dir="$build_dir/$backend"
[[ ! "$backend" == "ocaml" ]] || eval $(opam config env)

cMODE="\`${MODE:-NORMAL}\`(.KList)"
cSCHEDULE="\`${SCHEDULE:-BYZANTIUM}_EVM\`(.KList)"

case "$run_command-$backend" in

    # Running
    run-@(ocaml|java|llvm|haskell|haskell-perf) )          run_krun         "$@" ;;
    interpret-@(ocaml|llvm)                     )          run_interpret    "$@" ;;
    prove-@(java|haskell|haskell-perf)          )          run_proof        "$@" ;;

    test-@(ocaml|java|llvm|haskell|haskell-perf)         ) run_test         "$@" ;;
    test-profile-@(ocaml|java|llvm|haskell|haskell-perf) ) run_test_profile "$@" ;;

    *) echo "
    usage: $0 (run|test|test-profile) [--backend (ocaml|java|llvm|haskell|haskell-perf)] <pgm>  <K args>*
           $0 interpret               [--backend (ocaml|llvm)]                           <pgm>
           $0 prove                   [--backend (java|haskell|haskell-perf)]            <spec> <K args>*

       $0 run          : Run a single EVM program
       $0 test         : Run a single EVM program like it's a test
       $0 test-profile : Additionally record timing and memory usage to '${test_log#$(pwd)/}'
       $0 interpret    : Run JSON EVM programs without K Frontend (external parser)
       $0 prove        : Run a EVM K proof

       Note: <pgm> is a path to a file containing an EVM program/test.
             <spec> is a K specification to be proved.
             <K args> are any arguments you want to pass to K when executing/proving.
" ; exit ;;
esac
